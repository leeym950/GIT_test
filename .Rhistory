estim.rank <- readRDS("estim_rank.rds")
estim.rank.random <- readRDS("estim_rank_random.rds")
plot(estim.rank, estim.rank.random)
getwd()
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 3
result <- nmf(expression.data, rank=r, seed=2019)
predict.classifier <- coef(result)
classifier <- as.matrix(apply(predict.classifier,2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
summary(result)
result
result
coef(result)
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
library(dplyr)
library(survival)
library(survminer)
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
##
## 5. Making genesets for classification
##
library(CMScaller)
library(dplyr)
ensg <- expression.data
row.names(ensg) <- gsub("\\..*","",row.names(ensg))
symbol <- replaceGeneId(ensg, id.in="ensg", id.out="symbol")
# set threshold value
thres <- 6.0
##
## 4. making gene sets
##
row.names(expression.data) <- gsub("\\..*","",row.names(expression.data))
expression.data <- replaceGeneId(expression.data, id.in="ensg", id.out="symbol")
expression.data <- expression.data[- grep("NA[.]*", expression.data),]
View(expression.data)
if(length(extract.from.expression.data) != 0) {
expression.data <- select(raw.expression.data, extract.from.expression.data)
} else {
expression.data <- raw.expression.data
}
row.names(expression.data) <- gsub("\\..*","",row.names(expression.data))
expression.data <- replaceGeneId(expression.data, id.in="ensg", id.out="symbol")
View(expression.data)
row.names(expression.data)
grep("NA[.]*", row.names(expression.data))
expression.data <- expression.data[- grep("NA[.]*", row.names(expression.data)),]
#Calculation will be done @ Cluster
estim.rank <- nmf(expression.data, 2:6, nrun=40, seed=2019)
write.table(expression.data, file="expression_data.tsv", quote=F, sep="\t")
row.names(expression.data)
test <- read.delim("expression.data.tsv", row.names=1)
test <- read.delim("expression_data.tsv", row.names=1)
test <- read.delim("expression_data.tsv")
expression.data
test <- expression.data[0:1,]
test
test <- expression.data[,0:1]
test
View(test)
saveRDS(expression.data, file="expression_data.rds")
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 3
result <- nmf(expression.data, rank=r, seed=2019)
predict.classifier <- coef(result)
classifier <- as.matrix(apply(predict.classifier,2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
##
## 4. Classifiers by NMF predicts survival?
##
library(dplyr)
library(survival)
library(survminer)
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 3000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 2
result <- nmf(expression.data, rank=r, seed=2019)
predict.classifier <- coef(result)
classifier <- as.matrix(apply(predict.classifier,2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 2
result <- nmf(expression.data, rank=r, seed=2019)
predict.classifier <- coef(result)
classifier <- as.matrix(apply(predict.classifier,2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
classifier
View(class())
View(classifier
)
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 3
result <- nmf(expression.data, rank=r, seed=2019)
predict.classifier <- coef(result)
classifier <- as.matrix(apply(predict.classifier,2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 2
result <- nmf(expression.data, rank=r, seed=2019)
classifier <- as.matrix(apply(coef(result),2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
coef(result)
classifier
classifier[1]
classifier[2]
classifier[3]
coef(result)[1]
coef(result)[ ,1]
coef(result)[ ,2]
coef(result)[1 ,]
coef(result)[1,]
coef(result)[1,] > coef(result[2, ])
coef(result)[1,] > coef(result[2,])
coef(result)[1,] > coef(result)[2,]
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 4
result <- nmf(expression.data, rank=r, seed=2019)
classifier <- as.matrix(apply(coef(result),2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
##
## 5. Making genesets for classification
##
library(CMScaller)
library(dplyr)
ensg <- expression.data
row.names(ensg) <- gsub("\\..*","",row.names(ensg))
symbol <- replaceGeneId(ensg, id.in="ensg", id.out="symbol")
# set threshold value
thres <- 6.0
##
## 4. making gene sets
##
library(pamr)
# Group 3 was distinct from the rest. Thus, we will compare group 3 to others.
#bin.class <- as.integer(classifier == 3)
# merge vectors of the class labels for each sample into a list
TCGA.data <- list(x=as.matrix(symbol), y=as.factor(classifier),
geneid=rownames(symbol), genenames=rownames(symbol))
## Train the Classifier
TCGA.train <- pamr.train(TCGA.data)
## Cross-validation
TCGA.cv <- pamr.cv(TCGA.train, TCGA.data)
## Plot Cross-validated error curves
pamr.plotcv(TCGA.cv)
pamr.plotcen(TCGA.train, TCGA.data, threshold=thres)
## making genesets...
pamr.geneplot(TCGA.train, TCGA.data, threshold=thres)
gene.list <- as.data.frame(pamr.listgenes(TCGA.train, TCGA.data, threshold=thres, fitcv=TCGA.cv, genenames=FALSE))
gene.list <- gene.list[complete.cases(gene.list), ]
gene.list <- gene.list[- grep("NA[.]*", gene.list$id),]
gene.list$id <- as.character(gene.list$id)
indx <- sapply(gene.list, is.factor)
gene.list[indx] <- lapply(gene.list[indx], function(x) as.numeric(as.character(x)))
## set prop-selected-in-cv threshold
psic.threshold <- 0.6 # let's set it 0.6
filter <- gene.list$`prop-selected-in-CV` >= psic.threshold
gene.list <- gene.list[filter, ]
#idx <- gene.list$`0-score` < gene.list$`1-score`
#gene.list$classifier <- 1
#gene.list$classifier[idx] <- 2
gene.feature <- select(gene.list, id, classifier)
##
## 5. Making genesets for classification
##
library(CMScaller)
library(dplyr)
symbol <- expression.data
# set threshold value
thres <- 6.0
##
## 4. making gene sets
##
library(pamr)
# Group 3 was distinct from the rest. Thus, we will compare group 3 to others.
#bin.class <- as.integer(classifier == 3)
# merge vectors of the class labels for each sample into a list
TCGA.data <- list(x=as.matrix(symbol), y=as.factor(classifier),
geneid=rownames(symbol), genenames=rownames(symbol))
## Train the Classifier
TCGA.train <- pamr.train(TCGA.data)
## Cross-validation
TCGA.cv <- pamr.cv(TCGA.train, TCGA.data)
## Plot Cross-validated error curves
pamr.plotcv(TCGA.cv)
pamr.plotcen(TCGA.train, TCGA.data, threshold=thres)
## making genesets...
pamr.geneplot(TCGA.train, TCGA.data, threshold=thres)
pamr.plotcen(TCGA.train, TCGA.data, threshold=thres)
## Plot Cross-validated error curves
pamr.plotcv(TCGA.cv)
##
## 3_Perform NMF
##
## by 2_find_NMF_rank.R
r <- 3
result <- nmf(expression.data, rank=r, seed=2019)
classifier <- as.matrix(apply(coef(result),2,which.max)) # get Class with highest probability.
row.names(classifier) <- gsub(".", "-", row.names(classifier), fixed=TRUE) # replace . to -, fixed=TRUE is required to replace special characters, such as .(dot)
##
## 4. Classifiers by NMF predicts survival?
##
library(dplyr)
library(survival)
library(survminer)
subset <- merge(survival.data, classifier, by='row.names', all=TRUE)
subset <- subset[complete.cases(subset), ]
temp <- subset$X_TIME_TO_EVENT < 2000
subset <- subset[temp, ]
colnames(subset)[5] <- "NMF_Classifier" # rename the column
Surv.fit <-survfit(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
ggsurvplot(Surv.fit, data=subset,
title="Survival by NMF predicted classifier",
legend="bottom",
xlab="Time (in days)")
res <- pairwise_survdiff(Surv(X_TIME_TO_EVENT, X_EVENT) ~ NMF_Classifier, data=subset)
res
# merge vectors of the class labels for each sample into a list
TCGA.data <- list(x=as.matrix(symbol), y=as.factor(classifier),
geneid=rownames(symbol), genenames=rownames(symbol))
## Train the Classifier
TCGA.train <- pamr.train(TCGA.data)
## Cross-validation
TCGA.cv <- pamr.cv(TCGA.train, TCGA.data)
## Plot Cross-validated error curves
pamr.plotcv(TCGA.cv)
pamr.plotcen(TCGA.train, TCGA.data, threshold=thres)
# set threshold value
thres <- 4.0
pamr.plotcen(TCGA.train, TCGA.data, threshold=thres)
## making genesets...
pamr.geneplot(TCGA.train, TCGA.data, threshold=thres)
gene.list <- as.data.frame(pamr.listgenes(TCGA.train, TCGA.data, threshold=thres, fitcv=TCGA.cv, genenames=FALSE))
View(gene.list)
# set threshold value
thres <- 6.0
gene.list <- as.data.frame(pamr.listgenes(TCGA.train, TCGA.data, threshold=thres, fitcv=TCGA.cv, genenames=FALSE))
gene.list <- gene.list[complete.cases(gene.list), ]
gene.list$id <- as.character(gene.list$id)
indx <- sapply(gene.list, is.factor)
gene.list[indx] <- lapply(gene.list[indx], function(x) as.numeric(as.character(x)))
## set prop-selected-in-cv threshold
psic.threshold <- 0.6 # let's set it 0.6
filter <- gene.list$`prop-selected-in-CV` >= psic.threshold
gene.list <- gene.list[filter, ]
gene.list
features <- gene.list[ ,2:4]
row.names(features) <- gene.list$id
View(features)
which.max(features)
class(features)
which.max(features[1,])
which.max(features[256,])
which.max(features[ ,1:3])
which.max(features[ , ])
apply(features,2,which.max)
apply(features,1,which.max)
test <- apply(features,1,which.max)
test
View(test)
features <- apply(features,1,which.max)
gene.feature <- gene.list[ ,2:4]
gene.feature <- apply(gene.feature,1,which.max)
row.names(gene.feature) <- gene.list$id
gene.feature <- gene.list[ ,2:4]
row.names(gene.feature) <- gene.list$id
gene.feature <- apply(gene.feature,1,which.max)
library(CMScaller)
library(irr)
library(NMF)
datadir <- "C:/Users/leeym/Desktop/Personal/BI/Projects/Data/"
## READ DATA ##
exp.data <- read.table(paste0(datadir, "cc.gene_count.set.vst.float.txt")) # Read data in .txt format
exp.data <- as.matrix(exp.data) # convert into matrix
## DO ONLY ONCE ## TAKES LONG TIME ##
## Perform NTP analysis
template <- gene.feature
colnames(template) <- c("probe", "class")
template$probe <- as.character(template$probe)
template$class <- as.factor(template$class)
exp.data.adjust <- ematAdjust(exp.data, normMethod="quantile") # ematAdjust for Normalization
result <- ntp(exp.data.adjust, template, doPlot=TRUE, nPerm=1000)
substring(row.names(result),4,4) <- "-" # genes.RPS row names are in KR0.0000 but in Dataset, it's KR0-0000. Thus change .(dot) to "-"
subPairs(result)
template
View(template)
## Perform NTP analysis
template <- cbind(row.names(gene.feature), gene.feature)
View(template)
## Perform NTP analysis
template <- cbind(row.names(gene.feature), gene.feature[ ,1])
## Perform NTP analysis
template <- cbind(row.names(gene.feature), gene.feature)
row.names(gene.feature)
View(gene.feature)
gene.feature[0]
gene.feature[0]
gene.feature$a
gene.feature[1]
gene.feature[ ,1]
gene.feature[ ,0]
gene.feature[ ,-1]
row.names(gene.feature)
gene.feature <- gene.list[ ,2:4]
row.names(gene.feature) <- gene.list$id
gene.feature <- apply(gene.feature,1,which.max)
gene.feature <- gene.list[ ,2:4]
row.names(gene.feature) <- gene.list$id
gene.feature <- as.matrix(apply(gene.feature,1,which.max))
row.names(gene.feature)
gene.feature[ ,1]
## Perform NTP analysis
template <- cbind(row.names(gene.feature), gene.feature)
colnames(template) <- c("probe", "class")
template$probe <- as.character(template$probe)
template$class <- as.factor(template$class)
colnames(template) <- c("probe", "class")
View(template)
template$probe <- as.character(template$probe)
gene.feature <- as.data.frame(apply(gene.feature,1,which.max))
## Perform NTP analysis
template <- cbind(row.names(gene.feature), gene.feature)
colnames(template) <- c("probe", "class")
template$probe <- as.character(template$probe)
template$class <- as.factor(template$class)
exp.data.adjust <- ematAdjust(exp.data, normMethod="quantile") # ematAdjust for Normalization
result <- ntp(exp.data.adjust, template, doPlot=TRUE, nPerm=1000)
result <- ntp(exp.data.adjust, template, doPlot=TRUE, nPerm=1000)
ggboxplot(expression.data)
boxplot(expression.data)
boxplot(t(expression.data)
)
boxplot(t(expression.data)[ ,1:10])
boxplot(t(expression.data)[ ,1:20])
boxplot(t(expression.data)[ ,1:50])
boxplot(t(expression.data)[ ,1:100])
boxplot(texpression.data)
boxplot(expression.data)
boxplot(t(expression.data)[ ,1:100])
boxplot(exp.data)
boxplot(t(exp.data)[ ,1:10]
)
boxplot(t(exp.data)[ ,1:100])
boxplot(t(exp.data.adjust)[ ,1:100])
test <- expression.data
post.test <- ematAdjust(test, normMethod="upperquantile")
post.test <- ematAdjust(test, normMethod="upperquartile")
View(post.test)
boxplot(post.test)
boxplot(t(post.test)[ ,1:30])
boxplot(t(post.test)[ ,1:50])
post.test <- ematAdjust(test, center=10, normMethod="upperquartile")
boxplot(t(post.test)[ ,1:50])
min(post.test)
post.test <- post.test + 10
min(post.test)
post.test <- post.test + 10
min(post.test)
boxplot(t(post.test)[ ,1:100])
post.test <- ematAdjust(test, normMethod="TMM")
boxplot(t(post.test)[ ,1:100])
min(post.test)
mean(post.test)
mean(test)
post.test <- ematAdjust(test, normMethod="upperquartile") + mean(test)
boxplot(t(post.test)[ ,1:100])
min(expression.data)
mean(expression.data)
max(expression.data)
